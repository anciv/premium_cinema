from datetime import timedelta
from time import time

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import ContentType, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, \
    ParseMode

import config
from db import UserCommands
from dispatcher import dp, bot
from states import PaymentState

db = UserCommands()
PRICE = types.LabeledPrice(label="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Å—è—Ü", amount=1000 * 100)  # in cents


@dp.message_handler(commands=['start', 'menu'])
async def send_welcome(message: types.Message):
    menu_kb = ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    msg = '–ü—Ä–∏–≤–µ—Ç—Å–≤—É—é, —è –±–æ—Ç-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å <a href="https://t.me/api_py">PremiumCinema.</a>\n' \
          '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Å—è—Ü —Å—Ç–æ–∏—Ç 1000‚ÇΩ'

    if await db.user_exists(message.from_user.id):
        msg = '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá'
        menu_kb.add(KeyboardButton(text="–ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞"))
    else:
        menu_kb = InlineKeyboardMarkup(one_time_keyboard=True)
        menu_kb.add(InlineKeyboardMarkup(text="–ó–∞–ø–ª–∞—Ç–∏—Ç—å 1000‚ÇΩ", callback_data="buy:month"))

    await message.answer(msg,
                         reply_markup=menu_kb, parse_mode=ParseMode.HTML,
                         disable_web_page_preview=True)

    await PaymentState.first()


@dp.callback_query_handler(text_contains='buy:month', state=PaymentState.action)
async def get_action(call: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await buy(call.message)


@dp.message_handler(state=PaymentState.action)
async def get_action_subscribed_user(message: types.Message, state: FSMContext):
    await state.finish()
    days = await time_sub_day(message.from_user.id)
    if not days:
        await db.update_user_status(message.from_user.id, False)
        msg = '–£–≤—ã, —Å—Ä–æ–∫ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å—Ç–µ–∫. –•–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∞–∏—Ç—å —Å—Ä–æ–∫–∏?'
        menu_kb = InlineKeyboardMarkup(one_time_keyboard=True)
        menu_kb.add(InlineKeyboardMarkup(text="–ó–∞–ø–ª–∞—Ç–∏—Ç—å 1000‚ÇΩ", callback_data="buy:month"))

        await message.answer(msg, reply_markup=menu_kb)
        await PaymentState.first()
    else:
        status = '–ê–∫—Ç–∏–≤–Ω—ã–π' if await db.is_active(message.from_user.id) else '–ù–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–π'
        msg = f'<b>–°—Ç–∞—Ç—É—Å:</b> {status}\n' \
              f'<b>–ü–æ–¥–ø–∏—Å–∫–∞:</b> {days}'
        await message.answer(msg, parse_mode=ParseMode.HTML)


async def buy(message: types.Message):
    await bot.send_invoice(message.chat.id,
                           title="Bot subscription",
                           description="–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –º–µ—Å—è—Ü",
                           provider_token=config.PAYMASTER,
                           currency="rub",
                           is_flexible=False,
                           prices=[PRICE],
                           start_parameter="one_month_subscription",
                           payload="month_sub")


# pre checkout  (must be answered in 10 seconds)
@dp.pre_checkout_query_handler(lambda query: True)
async def pre_checkout_query(pre_checkout_q: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True)


# successful payment
@dp.message_handler(content_types=ContentType.SUCCESSFUL_PAYMENT)
async def successful_payment(message: types.Message):
    if message.successful_payment.invoice_payload == 'month_sub':
        sub_time = int(time()) + days_to_seconds(30)

        if await db.user_exists(message.from_user.id):
            await db.update_sub_days(message.from_user.id, sub_time)
            await db.update_user_status(message.from_user.id, True)
        else:
            await db.add_user(user_id=message.from_user.id, sub_time=sub_time)

        await message.answer(f"–û–ø–ª–∞—Ç–∞ –Ω–∞ —Å—É–º–º—É {message.successful_payment.total_amount //100} "
                             f"{message.successful_payment.currency} –ø—Ä–æ–∏–∑–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
        await message.answer('–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Å—è—Ü\n'
                             '–ù–∞–∂–º–∏—Ç–µ /menu –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º –ø–æ–¥–ø–∏—Å–∫–∏')


def days_to_seconds(days):
    return days * 24 * 60 * 60


async def time_sub_day(user_id):
    now = int(time())
    days_left = int(await db.get_sub_days(user_id)) - now
    td = str(timedelta(seconds=days_left))
    td = td.replace('days', '–¥–Ω–µ–π')
    td = td.replace('day', '–¥–µ–Ω—å')
    return False if days_left <= 0 else td


@dp.message_handler()
async def all_other(message: types.Message):
    await message.answer('–ù–∞–∂–º–∏—Ç–µ /menu –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è')
